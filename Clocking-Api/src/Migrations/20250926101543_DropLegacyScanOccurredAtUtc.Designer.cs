// <auto-generated />
using System;
using Clocking.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clocking.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250926101543_DropLegacyScanOccurredAtUtc")]
    partial class DropLegacyScanOccurredAtUtc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Clocking.Api.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Clocking.Api.Data.Entities.Reader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("Clocking.Api.Data.Entities.Scan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("OccurredAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Origin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReaderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WhenUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReaderId");

                    b.HasIndex("WhenUtc");

                    b.HasIndex("WorkerId");

                    b.ToTable("Scans");
                });

            modelBuilder.Entity("Clocking.Api.Data.Entities.WorkSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EndReaderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("EndUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StartReaderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("StartUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EndReaderId");

                    b.HasIndex("StartReaderId");

                    b.HasIndex("WorkerId")
                        .IsUnique()
                        .HasFilter("\"EndUtc\" IS NULL");

                    b.ToTable("WorkSessions");
                });

            modelBuilder.Entity("Clocking.Api.Data.Entities.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagUid")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TagUid")
                        .IsUnique();

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Clocking.Api.Data.Entities.Reader", b =>
                {
                    b.HasOne("Clocking.Api.Data.Entities.Location", "Location")
                        .WithMany("Readers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Clocking.Api.Data.Entities.Scan", b =>
                {
                    b.HasOne("Clocking.Api.Data.Entities.Reader", "Reader")
                        .WithMany()
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Clocking.Api.Data.Entities.Worker", "Worker")
                        .WithMany("Scans")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reader");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Clocking.Api.Data.Entities.WorkSession", b =>
                {
                    b.HasOne("Clocking.Api.Data.Entities.Reader", "EndReader")
                        .WithMany()
                        .HasForeignKey("EndReaderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Clocking.Api.Data.Entities.Reader", "StartReader")
                        .WithMany()
                        .HasForeignKey("StartReaderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Clocking.Api.Data.Entities.Worker", "Worker")
                        .WithMany("WorkSessions")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EndReader");

                    b.Navigation("StartReader");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Clocking.Api.Data.Entities.Location", b =>
                {
                    b.Navigation("Readers");
                });

            modelBuilder.Entity("Clocking.Api.Data.Entities.Worker", b =>
                {
                    b.Navigation("Scans");

                    b.Navigation("WorkSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
